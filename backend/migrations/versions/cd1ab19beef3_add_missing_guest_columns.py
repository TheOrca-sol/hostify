"""add missing guest columns

Revision ID: cd1ab19beef3
Revises: consolidate_bookings
Create Date: 2025-07-08 22:07:36.393740

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'cd1ab19beef3'
down_revision = 'consolidate_bookings'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First drop the existing RLS policy
    op.execute('DROP POLICY IF EXISTS "Users can only see their own guests" ON guests')
    
    # Add new columns to guests
    op.add_column('guests', sa.Column('phone', sa.Text(), nullable=True))
    op.add_column('guests', sa.Column('email', sa.Text(), nullable=True))
    op.add_column('guests', sa.Column('id_document_path', sa.Text(), nullable=True))
    op.add_column('guests', sa.Column('verification_status', sa.Text(), nullable=False, server_default='pending'))
    
    # Make columns nullable
    op.alter_column('guests', 'full_name',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('guests', 'cin_or_passport',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('guests', 'birthdate',
               existing_type=sa.DATE(),
               nullable=True)
    op.alter_column('guests', 'nationality',
               existing_type=sa.TEXT(),
               nullable=True)
    
    # Now we can safely drop user_id
    op.drop_column('guests', 'user_id')
    
    # Create new RLS policy based on property ownership
    op.execute("""
        CREATE POLICY "Users can only see their own guests" ON guests
        USING (
            EXISTS (
                SELECT 1 FROM reservations r
                JOIN properties p ON p.id = r.property_id
                WHERE r.id = guests.reservation_id
                AND p.user_id = auth.uid()::uuid
            )
        )
    """)
    
    # Handle other table changes
    op.drop_column('reservations', 'guest_email')
    op.drop_column('reservations', 'notes')
    op.drop_column('reservations', 'total_guests')
    
    # Update verification_links
    
    # First delete orphaned verification links
    op.execute("DELETE FROM verification_links WHERE guest_id IS NULL")
    
    # Now add new columns and constraints
    op.add_column('verification_links', sa.Column('status', sa.Text(), nullable=False, server_default='sent'))
    op.add_column('verification_links', sa.Column('contract_generated', sa.Boolean(), server_default=sa.text('false'), nullable=True))
    op.add_column('verification_links', sa.Column('contract_sent', sa.Boolean(), server_default=sa.text('false'), nullable=True))
    op.add_column('verification_links', sa.Column('contract_signed', sa.Boolean(), server_default=sa.text('false'), nullable=True))
    op.alter_column('verification_links', 'guest_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_column('verification_links', 'is_used')
    op.drop_column('verification_links', 'user_id')
    op.drop_column('verification_links', 'guest_name')
    # ### end Alembic commands ###


def downgrade():
    # First drop the new RLS policy
    op.execute('DROP POLICY IF EXISTS "Users can only see their own guests" ON guests')
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('verification_links', sa.Column('guest_name', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('verification_links', sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('verification_links', sa.Column('is_used', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.alter_column('verification_links', 'guest_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_column('verification_links', 'contract_signed')
    op.drop_column('verification_links', 'contract_sent')
    op.drop_column('verification_links', 'contract_generated')
    op.drop_column('verification_links', 'status')
    op.add_column('reservations', sa.Column('total_guests', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('reservations', sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('reservations', sa.Column('guest_email', sa.TEXT(), autoincrement=False, nullable=True))
    
    # Add back user_id column
    op.add_column('guests', sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False))
    
    # Restore user_id values from properties
    op.execute("""
        UPDATE guests g
        SET user_id = p.user_id::text
        FROM reservations r
        JOIN properties p ON p.id = r.property_id
        WHERE r.id = g.reservation_id
    """)
    
    # Create the old RLS policy
    op.execute("""
        CREATE POLICY "Users can only see their own guests" ON guests
        USING (auth.uid() = user_id::uuid)
    """)
    
    op.alter_column('guests', 'nationality',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('guests', 'birthdate',
               existing_type=sa.DATE(),
               nullable=False)
    op.alter_column('guests', 'cin_or_passport',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('guests', 'full_name',
               existing_type=sa.TEXT(),
               nullable=False)
    op.drop_column('guests', 'verification_status')
    op.drop_column('guests', 'id_document_path')
    op.drop_column('guests', 'email')
    op.drop_column('guests', 'phone')
    # ### end Alembic commands ###
